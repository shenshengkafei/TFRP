package main

import (
	"TFRP/azurerm"
	"TFRP/datadog"
	"TFRP/kubernetes"
	"TFRP/rpforrp"
	"context"
	"crypto/tls"
	"encoding/base32"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"math/rand"
	"net"
	"net/http"
	"net/url"
	"os"
	"os/exec"
	"strings"
	"time"

	"github.com/Azure/azure-sdk-for-go/arm/keyvault"
	"github.com/Azure/azure-sdk-for-go/arm/resources/resources"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/adal"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/gorilla/mux"
	"github.com/hashicorp/terraform/config"
	"github.com/hashicorp/terraform/helper/hilmapstructure"
	"github.com/hashicorp/terraform/helper/resource"
	"github.com/hashicorp/terraform/helper/schema"
	"github.com/hashicorp/terraform/terraform"
	"gopkg.in/mgo.v2"
	"gopkg.in/mgo.v2/bson"
)

type schemaMap map[string]*schema.Schema

type DatadogMonitorTemplateDefinition struct {
	Location   string
	Properties DatadogMonitorTemplateDefinitionProperties
}

type DatadogMonitorTemplateDefinitionProperties struct {
	ApiKey      string
	Appkey      string
	MonitorName string
}

type DatadogTimeboardTemplateDefinition struct {
	Location   string
	Properties DatadogTimeboardTemplateDefinitionProperties
}

type DatadogTimeboardTemplateDefinitionProperties struct {
	ApiKey               string
	Appkey               string
	TimeboardName        string
	TimeboardTitle       string
	TimeboardDescription string
	GraphTitle           string
	GraphViz             string
	GraphQuery           string
}

type KubernetesTemplateDefinition struct {
	Location          string
	KubeConfigFileUri string
	Config            string
}

type KubernetesPodDefinition struct {
	Location   string
	Properties KubernetesPodDefinitionProperties
}

type KubernetesPodDefinitionProperties struct {
	KubeConfigFileUri     string
	PodName               string
	ContainerImage        string
	ContainerName         string
	ContainerPort         int
	KeyVaultURI           string
	KeyVaultSecretName    string
	KeyVaultSecretVersion string
}

type KubernetesServiceDefinition struct {
	Location   string
	Properties KubernetesServiceDefinitionProperties
}

type KubernetesServiceDefinitionProperties struct {
	KubeConfigFileUri string
	ServiceName       string
	TargetPodName     string
	Port              int
	TargetPort        int
}

type DockerImageDefinition struct {
	Location   string
	Properties DockerImageDefinitionProperties
}

type DockerImageDefinitionProperties struct {
	SwaggerFileUri    string
	ImageName         string
	DockerhubAccount  string
	DockerhubPassword string
}

type Response struct {
	SubId        string
	RG           string
	Provider     string
	Resource     string
	ResourceName string
}

type Template struct {
	Schema         string             `json:"$schema,omitempty"`
	ContentVersion string             `json:"contentVersion,omitempty"`
	Resources      []TemplateResource `json:"resources,omitempty"`
}

type TemplateResource struct {
	Name       string                 `json:"name,omitempty"`
	Type       string                 `json:"type,omitempty"`
	Location   string                 `json:"location,omitempty"`
	ApiVersion string                 `json:"apiversion,omitempty"`
	Sku        map[string]interface{} `json:"sku,omitempty"`
	Tags       map[string]interface{} `json:"tags,omitempty"`
	Properties map[string]interface{} `json:"properties,omitempty"`
}

type Error struct {
	Error ErrorDetails `json:"error,omitempty"`
}

type ErrorDetails struct {
	Code    string `json:"code,omitempty"`
	Message string `json:"message,omitempty"`
}

var testAccProviders map[string]terraform.ResourceProvider
var testAccProvider *schema.Provider
var datadogTestAccProvider *schema.Provider
var kubernetesTestAccProvider *schema.Provider

func init() {
	testAccProvider = azurerm.Provider().(*schema.Provider)
	datadogTestAccProvider = datadog.Provider().(*schema.Provider)
	kubernetesTestAccProvider = kubernetes.Provider().(*schema.Provider)
	testAccProviders = map[string]terraform.ResourceProvider{
		"azurerm":    testAccProvider,
		"datadog":    datadogTestAccProvider,
		"kubernetes": kubernetesTestAccProvider,
	}
}

func GetPersonEndpoint(w http.ResponseWriter, req *http.Request) {
	params := mux.Vars(req)
	json.NewEncoder(w).Encode(Response{SubId: params["subscriptionId"], RG: params["resourceGroup"], Provider: params["provider"], Resource: params["resource"], ResourceName: params["name"]})
}

func PutResources(w http.ResponseWriter, req *http.Request) {
	body, _ := ioutil.ReadAll(req.Body)

	ctxProviders := make(map[string]terraform.ResourceProviderFactory)

	// add any fixed providers
	for k, p := range testAccProviders {
		ctxProviders[k] = terraform.ResourceProviderFactoryFixed(p)
	}

	providerResolver := terraform.ResourceProviderResolverFixed(ctxProviders)
	opts := terraform.ContextOpts{ProviderResolver: providerResolver}

	// A single state variable to track the lifecycle, starting with no state
	var state *terraform.State

	config := string(body)
	step := resource.TestStep{
		Config: config,
	}

	fmt.Fprintf(w, config)
	resource.ApplyConfig(opts, state, step)
}

func PutMonitorDepolyment(w http.ResponseWriter, req *http.Request) {
	monitorTemplateDefinition := DatadogMonitorTemplateDefinition{}
	defer req.Body.Close()
	json.NewDecoder(req.Body).Decode(&monitorTemplateDefinition)

	ctxProviders := make(map[string]terraform.ResourceProviderFactory)
	// add any fixed providers
	for k, p := range testAccProviders {
		ctxProviders[k] = terraform.ResourceProviderFactoryFixed(p)
	}

	providerResolver := terraform.ResourceProviderResolverFixed(ctxProviders)
	opts := terraform.ContextOpts{ProviderResolver: providerResolver}
	// A single state variable to track the lifecycle, starting with no state
	var state *terraform.State
	config := GetDatadogMonitorTempalte(monitorTemplateDefinition)
	step := resource.TestStep{
		Config: config,
	}

	responseBody, _ := json.Marshal(monitorTemplateDefinition)
	w.Header().Set("Content-Type", "application/json")
	w.Write(responseBody)
	fmt.Println(config)
	resource.ApplyConfig(opts, state, step)
}

func PutDeployment(w http.ResponseWriter, req *http.Request) {
	params := mux.Vars(req)
	body, _ := ioutil.ReadAll(req.Body)

	configMessage := string(body)
	result, err := config.Load(configMessage)
	if err != nil {
		fmt.Fprintf(w, err.Error())
	}

	err = result.Validate()
	if err != nil {
		fmt.Fprintf(w, err.Error())
	}

	templateResources := make([]TemplateResource, len(result.Resources))
	for k, v := range result.Resources {
		resourceConfig := *terraform.NewResourceConfig(v.RawConfig)

		resourcesProperties := make(map[string]interface{})
		sku := make(map[string]interface{})

		raw, _ := resourceConfig.Get("")
		m, _ := raw.(map[string]interface{})

		for subk, value := range m {
			if !strings.EqualFold(subk, "name") && !strings.EqualFold(subk, "resource_group_name") && !strings.EqualFold(subk, "location") && !strings.EqualFold(subk, "tags") {
				if strings.EqualFold(subk, "account_type") {
					sku["name"] = value
				} else {
					resourcesProperties[strings.Replace(subk, "_", "", -1)] = value
				}
			}
		}

		resourceName, _ := resourceConfig.Get("name")
		resourceLocation, _ := resourceConfig.Get("location")

		resourcesTagMap := make(map[string]interface{})
		resourceTagsRaw, ok := resourceConfig.Get("tags")

		if ok {
			hilmapstructure.WeakDecode(resourceTagsRaw, &resourcesTagMap)
		}

		templateResources[k] = TemplateResource{
			Name:       resourceName.(string),
			Type:       resourceTypeTransform(v.Type),
			ApiVersion: resourceApiVersion(v.Type),
			Sku:        sku,
			Location:   resourceLocation.(string),
			Tags:       resourcesTagMap,
			Properties: resourcesProperties}
	}

	template := Template{
		Schema:         "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
		ContentVersion: "1.0.0.0",
		Resources:      templateResources,
	}

	c := map[string]string{
		"AZURE_CLIENT_ID":       "b113ac54-4b98-4c10-ae0c-509cb08cbee7",
		"AZURE_CLIENT_SECRET":   "e3df36d9-2d0f-4e05-a1ad-b5888961a306",
		"AZURE_SUBSCRIPTION_ID": "e01d2242-4534-453d-a79f-a5407954ddd7",
		"AZURE_TENANT_ID":       "72f988bf-86f1-41af-91ab-2d7cd011db47"}

	oauthConfig, _ := adal.NewOAuthConfig(azure.PublicCloud.ActiveDirectoryEndpoint, c["AZURE_TENANT_ID"])
	spt, _ := adal.NewServicePrincipalToken(*oauthConfig, c["AZURE_CLIENT_ID"], c["AZURE_CLIENT_SECRET"], azure.PublicCloud.ResourceManagerEndpoint)

	deploymentsClient := resources.NewDeploymentsClient("e01d2242-4534-453d-a79f-a5407954ddd7")
	deploymentsClient.Authorizer = autorest.NewBearerAuthorizer(spt)
	jsonTemplate, _ := json.Marshal(template)
	templateMap := map[string]interface{}{}
	json.Unmarshal(jsonTemplate, &templateMap)
	deploymentProperties := resources.DeploymentProperties{
		Template: &templateMap,
		Mode:     resources.Complete,
	}

	deployment := resources.Deployment{
		Properties: &deploymentProperties,
	}

	deploymentsClient.CreateOrUpdate(params["resourceGroup"], params["deploymentName"], deployment, nil)
	fmt.Fprintf(w, "Deployment sent:")
	fmt.Fprintf(w, string(jsonTemplate))

	/*deploymentResponseChannel, errChannel := deploymentsClient.CreateOrUpdate(resourceGroupName, params["deploymentName"], deployment, nil)

	deploymentResponse := <-deploymentResponseChannel
	err = <-errChannel

	if err != nil {
		fmt.Fprintf(w, err.Error())
	}

	response := deploymentResponse.Response
	fmt.Fprintf(w, response.Status)*/
}

func randStringRunes(n int) string {
	letterRunes := []rune("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ")
	b := make([]rune, n)
	for i := range b {
		b[i] = letterRunes[rand.Intn(len(letterRunes))]
	}
	return string(b)
}

func resourceTypeTransform(hclType string) string {
	switch hclType {
	case "azurerm_storage_account":
		return "Microsoft.Storage/storageAccounts"
	default:
		return fmt.Sprintf("Microsoft.ExternalShim/%s", hclType)
	}
}

func resourceApiVersion(hclType string) string {
	switch hclType {
	case "azurerm_storage_account":
		return "2017-06-01"
	default:
		return fmt.Sprintf("2017-08-01", hclType)
	}
}

func PutTimeboardDepolyment(w http.ResponseWriter, req *http.Request) {
	timeboardTemplateDefinition := DatadogTimeboardTemplateDefinition{}
	defer req.Body.Close()
	json.NewDecoder(req.Body).Decode(&timeboardTemplateDefinition)

	ctxProviders := make(map[string]terraform.ResourceProviderFactory)
	// add any fixed providers
	for k, p := range testAccProviders {
		ctxProviders[k] = terraform.ResourceProviderFactoryFixed(p)
	}

	providerResolver := terraform.ResourceProviderResolverFixed(ctxProviders)
	opts := terraform.ContextOpts{ProviderResolver: providerResolver}
	// A single state variable to track the lifecycle, starting with no state
	var state *terraform.State
	config := GetDatadogTimeboardTempalte(timeboardTemplateDefinition)
	step := resource.TestStep{
		Config: config,
	}

	responseBody, _ := json.Marshal(timeboardTemplateDefinition)
	w.Header().Set("Content-Type", "application/json")
	w.Write(responseBody)
	fmt.Println(config)
	resource.ApplyConfig(opts, state, step)
}

func PutKubernetesDepolyment(w http.ResponseWriter, req *http.Request) {
	kubernetesTemplateDefinition := KubernetesTemplateDefinition{}
	defer req.Body.Close()
	json.NewDecoder(req.Body).Decode(&kubernetesTemplateDefinition)

	out, err := exec.Command("uuidgen").Output()
	if err != nil {
		log.Fatal(err)
	}
	configFileName := fmt.Sprintf("/tmp/%s", base32.StdEncoding.EncodeToString(out))
	fmt.Printf("%s", configFileName)

	resp, err := http.Get(kubernetesTemplateDefinition.KubeConfigFileUri)
	if err != nil {
		log.Fatal("Cannot download config file", err)
	}
	defer resp.Body.Close()
	body, err := ioutil.ReadAll(resp.Body)

	file, err := os.Create(configFileName)
	if err != nil {
		log.Fatal("Cannot create file", err)
	}
	defer file.Close()

	fmt.Fprintf(file, string(body))

	// prepare to apply config file
	ctxProviders := make(map[string]terraform.ResourceProviderFactory)
	// add any fixed providers
	for k, p := range testAccProviders {
		ctxProviders[k] = terraform.ResourceProviderFactoryFixed(p)
	}
	providerResolver := terraform.ResourceProviderResolverFixed(ctxProviders)
	opts := terraform.ContextOpts{ProviderResolver: providerResolver}
	// A single state variable to track the lifecycle, starting with no state
	var state *terraform.State
	config := GetKubernetesTempalte(configFileName, kubernetesTemplateDefinition.Config)
	step := resource.TestStep{
		Config: config,
	}

	responseBody, _ := json.Marshal(kubernetesTemplateDefinition)
	w.Header().Set("Content-Type", "application/json")
	w.Write(responseBody)

	go resource.ApplyConfig(opts, state, step)
}

func PutKubernetesPod(w http.ResponseWriter, req *http.Request) {
	kubernetesPodDefinition := KubernetesPodDefinition{}
	defer req.Body.Close()
	json.NewDecoder(req.Body).Decode(&kubernetesPodDefinition)

	// out, err := exec.Command("uuidgen").Output()
	// if err != nil {
	// 	log.Fatal(err)
	// }
	// configFileName := fmt.Sprintf("/tmp/%s", base32.StdEncoding.EncodeToString(out))
	// fmt.Printf("%s", configFileName)

	// resp, err := http.Get(kubernetesPodDefinition.Properties.KubeConfigFileUri)
	// if err != nil {
	// 	log.Fatal("Cannot download config file", err)
	// }
	// defer resp.Body.Close()
	// body, err := ioutil.ReadAll(resp.Body)

	// file, err := os.Create(configFileName)
	// if err != nil {
	// 	log.Fatal("Cannot create file", err)
	// }
	// defer file.Close()

	// fmt.Fprintf(file, string(body))

	inlineconfig := getSecretFromKeyVault(kubernetesPodDefinition.Properties.KeyVaultURI, kubernetesPodDefinition.Properties.KeyVaultSecretName, kubernetesPodDefinition.Properties.KeyVaultSecretVersion)

	//inlineconfig := ""
	// prepare to apply config file
	ctxProviders := make(map[string]terraform.ResourceProviderFactory)
	// add any fixed providers
	for k, p := range testAccProviders {
		ctxProviders[k] = terraform.ResourceProviderFactoryFixed(p)
	}
	providerResolver := terraform.ResourceProviderResolverFixed(ctxProviders)
	opts := terraform.ContextOpts{ProviderResolver: providerResolver}
	// A single state variable to track the lifecycle, starting with no state
	var state *terraform.State
	config := GetKubernetesPodTempalte(inlineconfig, kubernetesPodDefinition.Properties)
	step := resource.TestStep{
		Config: config,
	}

	responseBody, _ := json.Marshal(kubernetesPodDefinition)
	w.Header().Set("Content-Type", "application/json")
	w.Write(responseBody)

	go resource.ApplyConfig(opts, state, step)
}

func PutKubernetesPodNew(w http.ResponseWriter, req *http.Request) {
	kubernetesPodDefinition := KubernetesPodDefinition{}
	defer req.Body.Close()
	json.NewDecoder(req.Body).Decode(&kubernetesPodDefinition)

	inlineconfig := ""
	//inlineconfig := getSecretFromKeyVault(kubernetesPodDefinition.Properties.KeyVaultURI, kubernetesPodDefinition.Properties.KeyVaultSecretName, kubernetesPodDefinition.Properties.KeyVaultSecretVersion)
	decoded, _ := base64.StdEncoding.DecodeString(inlineconfig)
	decodedInlineconfig := string(decoded)

	ctxProviders := make(map[string]terraform.ResourceProviderFactory)

	for k, p := range testAccProviders {
		ctxProviders[k] = terraform.ResourceProviderFactoryFixed(p)
	}
	//providerResolver := terraform.ResourceProviderResolverFixed(ctxProviders)
	// opts := terraform.ContextOpts{ProviderResolver: providerResolver}

	// var state *terraform.State
	configFile := GetKubernetesPodTempalte(decodedInlineconfig, kubernetesPodDefinition.Properties)
	// step := resource.TestStep{
	// 	Config: configFile,
	// }

	responseBody, _ := json.Marshal(kubernetesPodDefinition)
	w.Header().Set("Content-Type", "application/json")
	w.Write(responseBody)

	provider := testAccProviders["kubernetes"]

	cfg, err := config.Load(configFile)
	if err != nil {
		fmt.Printf("%s", err)
	}

	for _, v := range cfg.ProviderConfigs {
		provider.Configure(terraform.NewResourceConfig(v.RawConfig))
	}

	info := &terraform.InstanceInfo{
		Type: "kubernetes_pod",
	}

	for _, v := range cfg.Resources {
		state := new(terraform.InstanceState)
		state.Init()
		diff, err := provider.Diff(info, state, terraform.NewResourceConfig(v.RawConfig))
		if err != nil {
			fmt.Printf("%s", err)
		}
		newState := new(terraform.InstanceState)
		newState.Init()

		provider.Apply(info, newState, diff)

		// resource, ok := provider.(*schema.Provider).ResourcesMap[info.Type]
		// if !ok {
		// 	fmt.Printf("unknown resource type: %s", info.Type)
		// }

		// data, _ := resource.GetResourceData(newState, diff)
		// data.MarkNewResource()
		// err = resource.Create(data, provider.(*schema.Provider).Meta())
	}
}

func PutKubernetesService(w http.ResponseWriter, req *http.Request) {
	kubernetesServiceDefinition := KubernetesServiceDefinition{}
	defer req.Body.Close()
	json.NewDecoder(req.Body).Decode(&kubernetesServiceDefinition)

	out, err := exec.Command("uuidgen").Output()
	if err != nil {
		log.Fatal(err)
	}
	configFileName := fmt.Sprintf("/tmp/%s", base32.StdEncoding.EncodeToString(out))
	fmt.Printf("%s", configFileName)

	resp, err := http.Get(kubernetesServiceDefinition.Properties.KubeConfigFileUri)
	if err != nil {
		log.Fatal("Cannot download config file", err)
	}
	defer resp.Body.Close()
	body, err := ioutil.ReadAll(resp.Body)

	file, err := os.Create(configFileName)
	if err != nil {
		log.Fatal("Cannot create file", err)
	}
	defer file.Close()

	fmt.Fprintf(file, string(body))

	// prepare to apply config file
	ctxProviders := make(map[string]terraform.ResourceProviderFactory)
	// add any fixed providers
	for k, p := range testAccProviders {
		ctxProviders[k] = terraform.ResourceProviderFactoryFixed(p)
	}
	providerResolver := terraform.ResourceProviderResolverFixed(ctxProviders)
	opts := terraform.ContextOpts{ProviderResolver: providerResolver}
	// A single state variable to track the lifecycle, starting with no state
	var state *terraform.State
	config := GetKubernetesServiceTempalte(configFileName, kubernetesServiceDefinition.Properties)
	step := resource.TestStep{
		Config: config,
	}

	responseBody, _ := json.Marshal(kubernetesServiceDefinition)
	w.Header().Set("Content-Type", "application/json")
	w.Write(responseBody)

	go resource.ApplyConfig(opts, state, step)
}

func PutDockerImage(w http.ResponseWriter, req *http.Request) {
	dockerImageDefinition := DockerImageDefinition{}
	defer req.Body.Close()
	json.NewDecoder(req.Body).Decode(&dockerImageDefinition)

	out, err := exec.Command("uuidgen").Output()
	if err != nil {
		log.Fatal(err)
	}
	configFileName := fmt.Sprintf("/tmp/%s", base32.StdEncoding.EncodeToString(out))
	fmt.Printf("%s", configFileName)

	resp, err := http.Get(dockerImageDefinition.Properties.SwaggerFileUri)
	if err != nil {
		log.Fatal("Cannot download config file", err)
	}
	defer resp.Body.Close()
	body, err := ioutil.ReadAll(resp.Body)

	file, err := os.Create(configFileName)
	if err != nil {
		log.Fatal("Cannot create file", err)
	}
	defer file.Close()

	fmt.Fprintf(file, string(body))

	out, err = exec.Command("uuidgen").Output()
	if err != nil {
		log.Fatal(err)
	}
	outputDir := fmt.Sprintf("/tmp/%s/", base32.StdEncoding.EncodeToString(out))
	fmt.Printf("%s", outputDir)

	codegenCommand := "java -jar ./swagger-codegen-cli.jar generate -l aspnetcore -i " + configFileName + " -o " + outputDir
	out, err = exec.Command("bash", "-c", codegenCommand).CombinedOutput()
	if err != nil {
		fmt.Println(err)
	}
	fmt.Println(string(out))

	go rpforrp.BuildAndPushImageFromDockerfile(outputDir, dockerImageDefinition.Properties.ImageName, dockerImageDefinition.Properties.DockerhubAccount, dockerImageDefinition.Properties.DockerhubPassword)

	responseBody, _ := json.Marshal(dockerImageDefinition)
	w.Header().Set("Content-Type", "application/json")
	w.Write(responseBody)

	kubernetesServiceDefinition := KubernetesServiceDefinitionProperties{
		KubeConfigFileUri: "https://wudapp.blob.core.windows.net/appliance/config",
		ServiceName:       "rp4rp",
		TargetPodName:     "rp4rp",
		Port:              80,
		TargetPort:        5000}

	out, err = exec.Command("uuidgen").Output()
	if err != nil {
		log.Fatal(err)
	}
	kubeConfigFileName := fmt.Sprintf("/tmp/%s", base32.StdEncoding.EncodeToString(out))
	fmt.Printf("%s", kubeConfigFileName)

	resp, err = http.Get(kubernetesServiceDefinition.KubeConfigFileUri)
	if err != nil {
		log.Fatal("Cannot download config file", err)
	}
	defer resp.Body.Close()
	body, err = ioutil.ReadAll(resp.Body)

	kubeConfigfile, err := os.Create(kubeConfigFileName)
	if err != nil {
		log.Fatal("Cannot create file", err)
	}
	defer file.Close()

	fmt.Fprintf(kubeConfigfile, string(body))

	// prepare to apply config file
	ctxProviders := make(map[string]terraform.ResourceProviderFactory)
	// add any fixed providers
	for k, p := range testAccProviders {
		ctxProviders[k] = terraform.ResourceProviderFactoryFixed(p)
	}
	providerResolver := terraform.ResourceProviderResolverFixed(ctxProviders)
	opts := terraform.ContextOpts{ProviderResolver: providerResolver}
	// A single state variable to track the lifecycle, starting with no state
	var serviceState *terraform.State
	serviceConfig := GetKubernetesServiceTempalte(kubeConfigFileName, kubernetesServiceDefinition)
	serviceStep := resource.TestStep{
		Config: serviceConfig,
	}

	go resource.ApplyConfig(opts, serviceState, serviceStep)

	kubernetesPodDefinition := KubernetesPodDefinitionProperties{
		KubeConfigFileUri: "https://wudapp.blob.core.windows.net/appliance/config",
		PodName:           "rp4rp",
		ContainerImage:    dockerImageDefinition.Properties.ImageName,
		ContainerName:     "rp4rp",
		ContainerPort:     5000}

	var podState *terraform.State
	podConfig := GetKubernetesPodTempalte(kubeConfigFileName, kubernetesPodDefinition)
	podStep := resource.TestStep{
		Config: podConfig,
	}

	go resource.ApplyConfig(opts, podState, podStep)
}

func NotFound(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(404)
	enc := json.NewEncoder(w)
	enc.SetIndent("", "  ")
	enc.Encode(Error{Error: ErrorDetails{Code: "RequestUriInvalid", Message: "Invalid request URI."}})
}

func GetDatadogMonitorTempalte(definition DatadogMonitorTemplateDefinition) string {
	return fmt.Sprintf(`
provider "datadog" {
  api_key = "%s"
  app_key = "%s"
}

resource "datadog_monitor" "%s" {
  name = "%s"
  type = "metric alert"
  message = "some message Notify: @hipchat-channel"
  escalation_message = "the situation has escalated @pagerduty"

  query = "avg(last_1h):avg:aws.ec2.cpu{environment:foo,host:foo} by {host} > 2"

  thresholds {
        warning = "1.0"
        critical = "2.0"
  }

  renotify_interval = 60

  notify_audit = false
  timeout_h = 60
  new_host_delay = 600
  evaluation_delay = 700
  include_tags = true
  require_full_window = true
  locked = false
  tags = ["foo:bar", "baz"]
}
`, definition.Properties.ApiKey, definition.Properties.Appkey, definition.Properties.MonitorName, definition.Properties.MonitorName)
}

func GetDatadogTimeboardTempalte(definition DatadogTimeboardTemplateDefinition) string {
	return fmt.Sprintf(`
provider "datadog" {
  api_key = "%s"
  app_key = "%s"
}

resource "datadog_timeboard" "%s" {
  title       = "%s"
  description = "%s"
  read_only   = true

  graph {
    title = "%s"
    viz   = "%s"

    request {
      "q" = "%s"
      "type" = "line"
      "aggregator" = "avg"
    }
  }
}
`, definition.Properties.ApiKey, definition.Properties.Appkey, definition.Properties.TimeboardName, definition.Properties.TimeboardTitle, definition.Properties.TimeboardDescription,
		definition.Properties.GraphTitle, definition.Properties.GraphViz, definition.Properties.GraphQuery)
}

func GetKubernetesTempalte(configFileName string, kubeConfig string) string {
	return fmt.Sprintf(`
provider "kubernetes" {
  config_path = "%s"
}

%s
`, configFileName, kubeConfig)
}

func GetKubernetesPodTempalte(configFile string, kubenetesPodProperties KubernetesPodDefinitionProperties) string {
	return fmt.Sprintf(`
		{
			"provider": {
				"kubernetes": {
					"inline_config": %q
				}
			},
			"resource": {
				"kubernetes_pod": {
					"%s": {
						"metadata": [{
							"name": "%s",
							"labels": {
								"App": "%s"
							}
						}],
						"spec": [{
							"container": {
								"image": "%s",
								"name": "%s",
								"port": {
									"container_port": %d
								}
							}
						}]
					}
				}
			}
		}
`, []byte(configFile), kubenetesPodProperties.PodName, kubenetesPodProperties.PodName, kubenetesPodProperties.PodName, kubenetesPodProperties.ContainerImage, kubenetesPodProperties.ContainerName, kubenetesPodProperties.ContainerPort)
}

func GetKubernetesServiceTempalte(configFileName string, kubenetesServiceProperties KubernetesServiceDefinitionProperties) string {
	return fmt.Sprintf(`
provider "kubernetes" {
  config_path = "%s"
}

resource "kubernetes_service" "%s" {
	metadata {
	  name = "%s"
	}
	spec {
	  selector {
		App = "%s"
	  }
	  port {
		port = %d
		target_port = %d
	  }
  
	  type = "LoadBalancer"
	}
  }
`, configFileName, kubenetesServiceProperties.ServiceName, kubenetesServiceProperties.ServiceName, kubenetesServiceProperties.TargetPodName, kubenetesServiceProperties.Port, kubenetesServiceProperties.TargetPort)
}

func getSecretFromKeyVault(vaultBaseUri string, SecretName string, SecretVersion string) string {
	fmt.Printf("uri %s", vaultBaseUri)
	fmt.Printf("name %s", SecretName)
	fmt.Printf("version %s", SecretVersion)

	clientID := "c7d7472f-2fd3-40af-9416-f769e8b88a09"
	clientSecret := "0a55595f-016b-49ea-a9c7-e4adc798cd92"
	tenantID := "72f988bf-86f1-41af-91ab-2d7cd011db47"

	oauthConfig, err := adal.NewOAuthConfig(azure.PublicCloud.ActiveDirectoryEndpoint, tenantID)
	updatedAuthorizeEndpoint, err := url.Parse("https://login.windows.net/" + tenantID + "/oauth2/token")
	oauthConfig.AuthorizeEndpoint = *updatedAuthorizeEndpoint
	spToken, err := adal.NewServicePrincipalToken(*oauthConfig, clientID, clientSecret, "https://vault.azure.net")

	if err != nil {
		log.Fatal("failed to create token", err)
	}

	vaultsClient := keyvault.NewWithoutDefaults()
	vaultsClient.Authorizer = autorest.NewBearerAuthorizer(spToken)

	vault, err := vaultsClient.GetSecret(context.Background(), "https://terraformkv.vault.azure.net/", "kubeconfig", "5cf4db27b613472f89c91fd9192decd1")
	if err != nil {
		log.Fatal("Failed to get secret ", err)
	}
	return *vault.Value
}

type Package struct {
	Id           bson.ObjectId `bson:"_id,omitempty"`
	ResourceId   string
	ProviderName string
	Config       string
}

type Provider struct {
	Location   string
	Properties PoviderProperties
}

type PoviderProperties struct {
	ProviderName string
	Settings     PoviderSettings
}

type PoviderSettings struct {
	Config string
}

type Resource struct {
	Location   string
	Properties ResourceProperties
}

type ResourceProperties struct {
	ProviderID   string
	ResourceName string
	Settings     interface{}
}

func getKubernetesTemplateInJson(configFile []byte, resource Resource, resourceID string, resourceSpec []byte) string {
	return fmt.Sprintf(`
		{
			"provider": {
				"kubernetes": {
					"inline_config": %q
				}
			},
			"resource": {
				"%s": {
					"%s": %s
				}
			}
		}
`, configFile, resource.Properties.ResourceName, resourceID, string(resourceSpec))
}

func putProvider(w http.ResponseWriter, req *http.Request) {
	params := mux.Vars(req)
	fullyQualifiedResourceID := "/subscriptions/" + params["subscriptionId"] + "/resourcegroups/" + params["resourceGroup"] + "/providers/Microsoft.Terraform-OSS/provider/" + params["provider"]

	provider := Provider{}
	defer req.Body.Close()
	json.NewDecoder(req.Body).Decode(&provider)

	database := "tfrp001"
	password := "TXWxRsEbZBrBUCJaq3Zu2NqdfafLJcdbKu8rJ6dwKBnjRzfSIwJ8vh23gxRof7GNhOgfeZjfqKL1M7fMWiWQEw=="

	// DialInfo holds options for establishing a session with a MongoDB cluster.
	dialInfo := &mgo.DialInfo{
		Addrs:    []string{fmt.Sprintf("%s.documents.azure.com:10255", database)}, // Get HOST + PORT
		Timeout:  60 * time.Second,
		Database: database, // It can be anything
		Username: database, // Username
		Password: password, // PASSWORD
		DialServer: func(addr *mgo.ServerAddr) (net.Conn, error) {
			return tls.Dial("tcp", addr.String(), &tls.Config{})
		},
	}

	// Create a session which maintains a pool of socket connections
	// to our MongoDB.
	session, err := mgo.DialWithInfo(dialInfo)

	if err != nil {
		fmt.Printf("Can't connect to mongo, go error %v\n", err)
		os.Exit(1)
	}

	defer session.Close()

	// SetSafe changes the session safety mode.
	// If the safe parameter is nil, the session is put in unsafe mode, and writes become fire-and-forget,
	// without error checking. The unsafe mode is faster since operations won't hold on waiting for a confirmation.
	// http://godoc.org/labix.org/v2/mgo#Session.SetMode.
	session.SetSafe(&mgo.Safe{})

	// get collection
	collection := session.DB(database).C("provider")

	// insert Document in collection
	err = collection.Insert(&Package{
		ResourceId:   fullyQualifiedResourceID,
		ProviderName: provider.Properties.ProviderName,
		Config:       provider.Properties.Settings.Config,
	})

	if err != nil {
		log.Fatal("Problem inserting data: ", err)
		return
	}

	// Get Document from collection
	result := Package{}
	err = collection.Find(bson.M{"resourceid": fullyQualifiedResourceID}).One(&result)
	if err != nil {
		log.Fatal("Error finding record: ", err)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	responseBody, _ := json.Marshal(provider)
	w.Write(responseBody)
}

func putResource(w http.ResponseWriter, req *http.Request) {
	resource := Resource{}
	defer req.Body.Close()
	json.NewDecoder(req.Body).Decode(&resource)

	database := "tfrp001"
	password := "TXWxRsEbZBrBUCJaq3Zu2NqdfafLJcdbKu8rJ6dwKBnjRzfSIwJ8vh23gxRof7GNhOgfeZjfqKL1M7fMWiWQEw=="

	// DialInfo holds options for establishing a session with a MongoDB cluster.
	dialInfo := &mgo.DialInfo{
		Addrs:    []string{fmt.Sprintf("%s.documents.azure.com:10255", database)}, // Get HOST + PORT
		Timeout:  60 * time.Second,
		Database: database, // It can be anything
		Username: database, // Username
		Password: password, // PASSWORD
		DialServer: func(addr *mgo.ServerAddr) (net.Conn, error) {
			return tls.Dial("tcp", addr.String(), &tls.Config{})
		},
	}

	// Create a session which maintains a pool of socket connections
	// to our MongoDB.
	session, err := mgo.DialWithInfo(dialInfo)

	if err != nil {
		fmt.Printf("Can't connect to mongo, go error %v\n", err)
		os.Exit(1)
	}

	defer session.Close()

	// SetSafe changes the session safety mode.
	// If the safe parameter is nil, the session is put in unsafe mode, and writes become fire-and-forget,
	// without error checking. The unsafe mode is faster since operations won't hold on waiting for a confirmation.
	// http://godoc.org/labix.org/v2/mgo#Session.SetMode.
	session.SetSafe(&mgo.Safe{})

	// get collection
	collection := session.DB(database).C("provider")

	// Get Document from collection
	result := Package{}
	err = collection.Find(bson.M{"resourceid": resource.Properties.ProviderID}).One(&result)
	if err != nil {
		log.Fatal("Error finding record: ", err)
		return
	}

	//inlineconfig := ""
	inlineconfig := result.Config
	decoded, _ := base64.StdEncoding.DecodeString(inlineconfig)
	resourceSpec, _ := json.Marshal(resource.Properties.Settings)

	params := mux.Vars(req)
	configFile := getKubernetesTemplateInJson(decoded, resource, params["resource"], resourceSpec)
	fmt.Printf("%s", configFile)

	responseBody, _ := json.Marshal(resource)
	w.Header().Set("Content-Type", "application/json")
	w.Write(responseBody)

	provider := testAccProviders["kubernetes"]

	cfg, err := config.Load(configFile)
	if err != nil {
		fmt.Printf("%s", err)
	}

	for _, v := range cfg.ProviderConfigs {
		provider.Configure(terraform.NewResourceConfig(v.RawConfig))
	}

	info := &terraform.InstanceInfo{
		Type: resource.Properties.ResourceName,
	}

	for _, v := range cfg.Resources {
		state := new(terraform.InstanceState)
		state.Init()
		diff, err := provider.Diff(info, state, terraform.NewResourceConfig(v.RawConfig))
		if err != nil {
			fmt.Printf("%s", err)
		}
		newState := new(terraform.InstanceState)
		newState.Init()

		provider.Apply(info, newState, diff)
	}
}

func main() {
	router := mux.NewRouter()
	router.NotFoundHandler = http.HandlerFunc(NotFound)
	router.HandleFunc("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.ExternalShim/externalProvider/{provider}/resource/{resource}/{name}", GetPersonEndpoint).Methods("GET")
	router.HandleFunc("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.ExternalShim/externalProvider/{provider}/resource/{resource}/{name}", PutResources).Methods("PUT")
	router.HandleFunc("/subscriptions/{subscriptionId}/resourcegroups/{resourceGroup}/providers/Microsoft.ExternalShim/externalProvider/{monitorName}", PutMonitorDepolyment).Methods("PUT")
	router.HandleFunc("/subscriptions/{subscriptionId}/resourcegroups/{resourceGroup}/providers/Microsoft.ExternalShim/deployments/{deploymentName}", PutDeployment).Methods("PUT")
	router.HandleFunc("/subscriptions/{subscriptionId}/resourcegroups/{resourceGroup}/providers/Microsoft.ExternalShim/terraform/datadog/timeboard/{timeboardName}", PutTimeboardDepolyment).Methods("PUT")
	router.HandleFunc("/subscriptions/{subscriptionId}/resourcegroups/{resourceGroup}/providers/Microsoft.ExternalShim/terraform/kubernetes/{kubernetes}", PutKubernetesDepolyment).Methods("PUT")
	router.HandleFunc("/subscriptions/{subscriptionId}/resourcegroups/{resourceGroup}/providers/Microsoft.ExternalShim/terraform/kubernetes/pod/{pod}", PutKubernetesPodNew).Methods("PUT")
	router.HandleFunc("/subscriptions/{subscriptionId}/resourcegroups/{resourceGroup}/providers/Microsoft.ExternalShim/terraform/{terraform}/kubernetes/{kubernetes}/pod/{pod}", PutKubernetesPodNew).Methods("PUT")
	router.HandleFunc("/subscriptions/{subscriptionId}/resourcegroups/{resourceGroup}/providers/Microsoft.ExternalShim/terraform/kubernetes/service/{service}", PutKubernetesService).Methods("PUT")
	router.HandleFunc("/subscriptions/{subscriptionId}/resourcegroups/{resourceGroup}/providers/Microsoft.ExternalShim/terraform/{terraform}/kubernetes/{kubernetes}/service/{service}", PutKubernetesService).Methods("PUT")
	router.HandleFunc("/subscriptions/{subscriptionId}/resourcegroups/{resourceGroup}/providers/Microsoft.ExternalShim/rpforrp/{rpforrp}/dockerimages/{dockerimages}", PutDockerImage).Methods("PUT")
	router.HandleFunc("/subscriptions/{subscriptionId}/resourcegroups/{resourceGroup}/providers/Microsoft.Terraform-OSS/provider/{provider}", putProvider).Methods("PUT")
	router.HandleFunc("/subscriptions/{subscriptionId}/resourcegroups/{resourceGroup}/providers/Microsoft.Terraform-OSS/resource/{resource}", putResource).Methods("PUT")
	log.Fatal(http.ListenAndServeTLS(":443", "fullchain.pem", "privkey.pem", router))
	//log.Fatal(http.ListenAndServe(":8080", router))
}
